#+TITLE: Emacs Notes
#+AUTHOR: Peng Zhou

* Emacs 远程
** ssh
   C-x C-f /ssh:user@host#port:/home/file
   example
   ssh peng@162.219.125.203 -p 26642                            

* 英文系统环境中Emacs支持中文
  #+BEGIN_EXAMPLE
  alias emacs="export LC_CTYPE=zh_CN.UTF-8;emacs"
  #+END_EXAMPLE

* emacs 常用命令
** 查看手册
   #+BEGIN_EXAMPLE
   C-h i d m AUCTeX
   #+END_EXAMPLE

** 查看当前模式
   #+BEGIN_EXAMPLE
   M-x describe-mode
   C-h m
   #+END_EXAMPLE
** Restart yasnippet
   #+BEGIN_EXAMPLE
   yas-minor-mode
   #+END_EXAMPLE

** Quick rgrep string
   #+BEGIN_EXAMPLE
   M-x rgrep
   #+END_EXAMPLE
** Reload file in disk
   #+BEGIN_SRC lisp
   revert-buffer
   #+END_SRC

** List matching lines in current buffer(Occur)
   #+BEGIN_SRC lisp
   list-matching-lines
   M-s o (occur)
   #+END_SRC
** Insert-buffer

** Round paste
#+BEGIN_SRC lisp
Precious contents were saved in kill-ring
C-y , M-y (previous content)
#+END_SRC
** Move forward/backward at the same level
     #+BEGIN_SRC 
     M-} or M-{
     #+END_SRC

** Insert footnote [fn:1]
   - C-c C-x f
   - C-c C-c : jump to the footnote location
** 插入时间
#+BEGIN_SRC 
C-u M-! date
#+END_SRC
** 显示图片
#+BEGIN_SRC 
C-c C-x C-v
#+END_SRC
** 打开当前链接
#+BEGIN_SRC 
C-c C-o
#+END_SRC
* Python-mode
** C-c C-p
   start a python shell
** C-c C-z
   switch to python shell
** C-c C-c
   exec current py file
** flycheck

   - C-c ! C-c python-flake8 
     will run flake8 and shows its output in a separate buffer.

   - C-c ! v 
     will also be of interest, as it shows the state of syntax checkers.

* org-mode

** Insert link
   #+BEGIN_EXAMPLE
   [[link]]
   #+END_EXAMPLE
** Table

   |--------------------+-------------------------------------------|
   | key                | description                               |
   |--------------------+-------------------------------------------|
   | C-c + vertical bar | create table                              |
   | Tab                |                                           |
   | Shift Tab          |                                           |
   | M left/right       | move column                               |
   | M up/down          | move row                                  |
   | M S left/right     | delete/add column                         |
   | M S up/down        | delete/add row                            |
   | C-c -              | add horizontal line                       |
   |--------------------+-------------------------------------------|
   | C-c Return         | add horizontal line and jump to next line |
   |--------------------+-------------------------------------------|
   | C-c ^              | sort by current column                    |
   |--------------------+-------------------------------------------|
   
** Support Chinese
   #+BEGIN_EXAMPLE
   (setq org-latex-to-pdf-process '("xelatex -interaction nonstopmode %f"
"xelatex -interaction nonstopmode %f"))
(setq org-latex-default-packages-alist
(remove '("AUTO" "inputenc" t) org-latex-default-packages-alist))
   
(add-to-list 'org-latex-packages-alist '("UTF8" "ctex"))
   #+END_EXAMPLE
** Add Title , Author Info

   #+BEGIN_EXAMPLE
   #+TITLE:
   #+AUTHOR:
   #+OPTIONS: toc: 3 # Set the index's level
   #+LATEX_CLASS: book
   #+END_EXAMPLE

** Org-mode uses latex [[http://blog.csdn.net/csfreebird/article/details/43636615]]

   - Look up entities : M-x org-entities-help
   - Preview formula : C-c C-x C-l
   - Set the size of previewing formula
     #+BEGIN_SRC 
     (require 'org)  
     (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))  
     #+END_SRC

** Insert formula
   - [[http://forum.ubuntu.org.cn/viewtopic.php?p=2465090]]
   - subscript : a_{1}
   - superscript : a^{1}
   - summation
     #+BEGIN_SRC 
     
     #+END_SRC
* markdown
** reference
  - [[http://wiki.dreamrunner.org/public_html/Emacs/markdown.html][ref]]
  - [[http://jblevins.org/projects/markdown-mode/][markdown model]]

** preview
   C-c C-c l: markdown-live-preview-mode > *eww* buffer.

* Doxymacs
** Install
   #+BEGIN_EXAMPLE
   sudo apt-get install doxymacs
   #+END_EXAMPLE
* GDB
** Install(mac)
   - sudo codesign --force /opt/local/bin/ggdb -s gdb-cert [[http://blog.csdn.net/cairo123/article/details/52054280][ref]]
   - 如果是mac os10.12.2的话，正确做法是先用brew升级gdb 然后在
     .gdbinit文件中添加set startup-with-shell off

** Quick start
   - M-x gud-gdb
   - M-x gdb-many-windows
   
** Save breakpoints
   - set breakpoints on future shared libraries : default[on]
     set breakpoints pending on 

   - save breakpoints [filename]
   - source filename

** Usage
  - Show current function
    frame
    fr stack_number

  - show backtrace with specified numbers
    bt 5(-5)

** Examine memory
   - x/nfu addr
     * n : the repeat count
     * f : format, s(string), x(hex), u(unsigned int)
     * u : unit size, b(byte), h(halfwords), w(words, 4byte), g(gaint words, 8byte)

** Temporary breakpoints
   - tbreak line

** Set scheduler-locking : multi threads
   - set scheduler-locking off : 所有线程都执行
   - set scheduler-locking on : 只有当前线程执行
   - set scheduler-locking step : 

* Cuda-gdb
** Cuda thread
   - 列出当前活跃的GPU线程
     
** Cuda kernel
   - 列出当前活跃的GPU核
** Info cuda devices     
** Info cuda kernels
** Info stack
** Macro
   - gcc -gdwarf-2 -g3 file
   - info macro name
   - macro expand expression
** Set args
** Compile
   - nvcc -g -G file.cu
     -g : 将CPU代码编译为可调试版本
     -G : 将GPU代码编译为可调试版本
     
** Layout
   - layout src
   - layout asm
   - layout split
     
** Winheight
   - win src + 5
   - win src - 4
     
** Update
   - 重新定位到当前代码行

* YCMD
  [[https://github.com/Valloric/ycmd][ycmd]]
  #+BEGIN_SRC sh
  git clone ...
  git submodule update --init --recursive
  #+END_SRC

* GTD
 [[http://blog.csdn.net/lishuo_os_ds/article/details/8069484][GTD(getting things down)]]
** Refile finished task
#+BEGIN_SRC lisp
C-c C-w
#+END_SRC

* reference 
* Footnotes

[fn:1] https://my.oschina.net/klauszl/blog/261701

* Ubuntu
** 用户
*** 新建用户   
   1. naive
      adduser --home /mnt/usr/name name

   2. useradd
      * sudo useradd -d /home/dir name
      * sudo passwd name
      * sudo vim /etc/passwd

   3. 改变用户所属的用户和组
      * sudo chown -R user:group file #递归修改
      * sudo chown user file
      * sudo chgrp group file
       
   4. 容许用户使用 sudo 命令
      * chmod u+w /etc/sudoers
      * 在 root ALL=(ALL) ALL 下面添加
	user-name ALL=(ALL) ALL (允许用户执行sudo命令,需要输入密码)
      * chmod u-w /etc/sudoers

   5. 设置 root 用户密码
      * sudo passwd root

   6. 切换用户
      * su root
*** 删除用户
    sudo userdel -r user-name

** 终端走代理
   [[http://blog.csdn.net/wangong/article/details/60972922][ref]]
   - 安装Proxychains
      git clone https://github.com/rofl0r/proxychains-ng.git 
      cd proxychains-ng 
      ./configure 
      make && make install 
      cp ./src/proxychains.conf /etc/proxychains.conf 
      cd .. && rm -rf proxychains-ng
   - 编辑proxychains配置
      vim /etc/proxychains.conf 
      将socks4 127.0.0.1 9095改为
      socks5 127.0.0.1 1080
   - 使用方法
      在需要代理的命令前加上 proxychains4 ，如：
      proxychains4 wget http://xxx.com/xxx.zip

** 动态链接库
   - 修改 LD_LIBRARY_PATH
     export LD_LIBRARY_PATH="/home/lib:$LD_LIBRARY_PATH"

   - /etc/ld.so.conf
     注意 前面不要加 include
** anaconda3
   - .condarc
     #+BEGIN_EXAMPLE
      channels: 
      - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ 
      
      show_channel_urls: yes     
     #+END_EXAMPLE
** Cuda
   - Nvidia 驱动 [[http://blog.csdn.net/tianrolin/article/details/52830422][ref]]
     * tty1
       sudo service lightdm stop
       sudo ./NVIDIA.run
       sudo service lightdm start
   - 安装cuda
       
** gcc  g++ 版本管理
   - 安装不同版本 (gcc-4.9, gcc-5)
     sudo apt-get install gcc-4.9 g++-4.9

   - 设置默认版本
     sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 70 --slave /usr/bin/g++ g++ /usr/bin/g++-4.8
     sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-4.9
     sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 50 --slave /usr/bin/g++ g++ /usr/bin/g++-5

   - 查看不同版本
     sudo update-alternatives --query gcc

   - 不同版本切换
     sudo update-alternatives --config gcc

** Teamviewer
   - 重启服务
   #+BEGIN_EXAMPLE
   sudo teamviewer daemon stop
   sudo teamviewer daemon start  
   #+END_EXAMPLE
   
** Install and uninstall packages
   - apt-cache pkgnames | grep name
   - sudo apt autoremove <Package name>

** 重新安装 Unity
   #+BEGIN_EXAMPLE
   sudo apt-get install ubuntu-desktop
   sudo apt-get install unity
   sudo apt-get install unity-common
   sudo apt-get install unity-lens*
   sudo apt-get install unity-services
   sudo apt-get install unity-asset-pool
   #+END_EXAMPLE
   - 更新ubuntu及组件
     sudo apt-get update
     sudo apt-get upgrade

   - 移除所有无效的包和缓存
     sudo apt-get autoremove
     sudo apt-get autoclean

** 设置桌面环境
   - installed env
     /usr/share/xsessions/
   - modified file
     /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf

** SSH
   - 开启 ssh
     sudo apt-get install openssh-server
     sudo service ssh start

   - Use ssh
     ssh usr@ip

   - Does ssh start?
     sudo ps -e |grep ssh
** VNC
   - 主机之间复制
     vncconfig&

   - vnc 调整分辨率
     apt-get install vnc4server
     vncserver -geometry 1920x1080 :4

   - xstartup
     - xfce4
       apt-get install gnome-core xfce4 firefox nano
       #+BEGIN_EXAMPLE
        #!/bin/sh
        
        # Uncomment the following two lines for normal desktop:
        unset SESSION_MANAGER
        unset DBUS_SESSION_BUS_ADDRESS
        # exec /etc/X11/xinit/xinitrc
        startxfce4 &
        [ -x /etc/vnc/xstartup ] && exec /etc/vnc/xstartup
        [ -r $HOME/.Xresources ] && xrdb $HOME/.Xresources
        xsetroot -solid grey
        #vncconfig -iconic &
        #x-terminal-emulator -geometry 80x24+10+10 -ls -title "$VNCDESKTOP Desktop" &
        #x-window-manager &
       #+END_EXAMPLE

     - gnome
       sudo apt-get install gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal
       #+BEGIN_EXAMPLE
        #!/bin/sh
        
        export XKL_XMODMAP_DISABLE=1
        unset SESSION_MANAGER
        unset DBUS_SESSION_BUS_ADDRESS
        
        gnome-panel &
        gnome-settings-daemon &
        metacity &
        nautilus &
        gnome-terminal &
        vncconfig &       
       #+END_EXAMPLE

   - restart
     vncserver -kill :1
     vncserver -geometry 1280×800 :1

   - auto reboot
     crontab -e
     Add @reboot /usr/bin/vncserver :1 to the bottom of the file

** VPN
   - PPTP
     连接失败: kill -9 pptp 

   - L2tp
     #+BEGIN_EXAMPLE
     sudo service xl2tpd stop
     sudo update-rc.d xl2tpd disable
     #+END_EXAMPLE
** 查看内存
   - sudo dmidecode -t memory
     使用 -t 来限定关键字
     bios, system, baseboard, chassis, processor, memory, cache, connector, slot
** 防火墙
   - ufw
     /etc/default/ufw
   - 重启防火墙
     sudo ufw disable
     sudo ufw enable
** 重启网络
   sudo service network-manager restart
   
** ipv6
   - file : /etc/network/interfaces
     #+BEGIN_EXAMPLE
     auto lo
     iface lo inet loopback
     auto eth0
     iface eth0 inet6 static
     address 2001:da8:2:10d::2
     netmask 64
     up route -A inet6 add default gw 2001:da8:2:10d::1 dev $IFACE
     dns-nameservers 8.8.8.8
     dns-nameservers 8.8.4.4
     dns-nameservers 2001:da8:8000:1:202:120:2:100
     dns-nameservers 2001:da8:8000:1:202:120:2:101
     #+END_EXAMPLE

* Soft Install

** dlib
   cd build
   cmake .. -DDLIB_USE_CUDA=1 -DUSE_AVX_INSTRUCTIONS=1; cmake --build .
   cd ..
   python3 setup.py install --yes USE_AVX_INSTRUCTIONS --yes DLIB_USE_CUDA

** caffe
   - 先把 python 相关的部分注释
     make all

   - 再编译 pycaffe
     make pycaffe
     注意查看 _caffe.so 链接的 libboost_python.so 版本
     

** boost
   - Prepare
     ./bootstrap.sh --help
     ./bootstrap.sh --show-libraries

   - Build
     #+BEGIN_EXAMPLE
     ./bootstrap.sh --with-libraries=all \
         --with-python=/home/shhs/anaconda3/bin/python3 \
         --prefix=/home/shhs/env/boost_1_64_g++5
     
     #+END_EXAMPLE
     # If cann't find pyconfig.h, then cp anaconda3/include/python3.5m python3.5
     ./b2 --with-python --buildid=3
     sudo ./b2 install

   - build with python2.7
     ./bootstrap.sh --with-libraries=python \
         --with-python=/home/shhs/anaconda2/bin/python2.7 \
         --prefix=/home/shhs/env/boost_python2.7
     
     ./b2 --with-python --buildid=2

** OpenFace
   - opencv-3.2.0
     #+BEGIN_EXAMPLE
       mkdir build 
       cd build
       cmake \
             -D CMAKE_CXX_COMPILER=clang++-3.7 \
             -D CMAKE_CXX_FLAGS="-std=c++11 -stdlib=libc++ -I/usr/include/libcxxabi" \
             -D CMAKE_EXE_LINKER_FLAGS="-std=c++11 -stdlib=libc++ -lc++abi" \
             -D CMAKE_BUILD_TYPE=RELEASE \
             -D CMAKE_INSTALL_PREFIX=/home/shhs/env/opencv3_2_openface \
             -D OPENCV_EXTRA_MODULES_PATH=/home/shhs/usr/soft/opencv_contrib/modules \
             -D BUILD_TIFF=ON \
             -D WITH_V4L=ON \
             -D WITH_GTK=ON \
             -D BUILD_opencv_dnn=OFF \
             -D BUILD_PYTHON_SUPPORT=OFF \
             -D BUILD_EXAMPLES=OFF \
             -D WITH_TBB=ON ..

cmake \
      -D CMAKE_CXX_COMPILER=clang++-3.7 \
      -D CMAKE_CXX_FLAGS="-std=c++11 -stdlib=libc++ -I/usr/include/libcxxabi" \
      -D CMAKE_EXE_LINKER_FLAGS="-std=c++11 -stdlib=libc++ -lc++abi" \



cmake \
      -D CMAKE_CXX_STANDARD=11 \
      -D CMAKE_CXX_FLAGS="-std=c++11" \
      -D CMAKE_EXE_LINKER_FLAGS="-std=c++11" \
      -D CMAKE_BUILD_TYPE=Release \
      -D CMAKE_INSTALL_PREFIX=/home/shhs/env/opencv3_2_openface \
      -D WITH_CUDA=OFF \
      -D BUILD_NEW_PYTHON_SUPPORT=OFF \
      -D BUILD_EXAMPLES=OFF \
      -D OPENCV_EXTRA_MODULES_PATH=/home/shhs/usr/soft/opencv_contrib/modules \
      -D BUILD_TIFF=ON \
      -D WITH_V4L=ON \
      -D WITH_GTK=ON \
      -D WITH_TBB=ON \
      -DBUILD_opencv_dnn=OFF \
      -DBUILD_opencv_matlab=OFF \
      -DBUILD_opencv_hdf5=OFF \
      ..

      -D PYTHON_EXECUTABLE=/home/shhs/anaconda3/bin/python3.5 \
      -D PYTHON3_INCLUDE_DIR=/home/shhs/anaconda3/include/python3.5m \
      -D PYTHON3_LIBRARY=/home/shhs/anaconda3/lib/libpython3.5m.so \
      -D PYTHON3_PACKAGES_PATH=/home/shhs/anaconda3/lib/python3.5/site-packages \

     #+END_EXAMPLE

   sudo apt-get install git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev
   sudo apt-get install libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev checkinstall
   sudo apt-get install liblapacke-dev checkinstall

   cmake -D CMAKE_CXX_COMPILER=clang++-3.7 -D CMAKE_CXX_FLAGS="-std=c++11 -stdlib=libc++ -I/usr/include/libcxxabi" -D CMAKE_EXE_LINKER_FLAGS="-std=c++11 -stdlib=libc++ -lc++abi" -D CMAKE_BUILD_TYPE=RELEASE ..

* CMake
  - opencv
    SET(OpenCV_DIR "/home/shhs/env/opencv3_2/share/OpenCV")

  - -fPIC
    set(CMAKE_POSITION_INDEPENDENT_CODE ON)
    
  - Info message
    message( STATUS|FATAL_ERROR “message” )

  - Build lib
    add_library(lib SHARED ${src_files})

  - Exe link lib
    #+BEGIN_EXAMPLE
    include_directories(${OpenCV_INCLUDE_DIRS} build)
    link_directories(build .)
    list(APPEND fa_required_libs ${OpenCV_LIBS} seeta_facedet_lib)
    add_executable(fa_align_test src/test/face_alignment_test.cpp)
    target_link_libraries(fa_align_test ${fa_required_libs})
    #+END_EXAMPLE

  - Move lib file into directed path
    #+BEGIN_EXAMPLE
    set(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib")
    #+END_EXAMPLE
    * LIBRARY_OUTPUT_PATH : 库输出路径
    * PROJECT_BINARY_DIR : cmake 执行路径

  - List all files in a dir
    aux_source_directory(dir var_list)
    file(GLOB INCLUDE_LIST ./include/*.h)

  - make install

    * Example
      #+BEGIN_EXAMPLE
      install(DIRECTORY include/ DESTINATION include/FaceDetection)
      install(TARGETS seeta_facedet_lib LIBRARY DESTINATION lib
        PERMISSIONS WORLD_EXECUTE OWNER_EXECUTE OWNER_WRITE OWNER_READ)
      #+END_EXAMPLE
    
    * install(DIRECTORY dirs... DESTINATION <dir>)
      install(DIRECTORY src/ DESTINATION include/myproj
        FILES_MATCHING PATTERN "*.h"

    * install(<FILES|PROGRAMS> files... DESTINATION <dir>)
    * install(TARGETS myExe mySharedLib myStaticLib
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib/static)
    * install(TARGETS mySharedLib DESTINATION /some/full/path)

  - build type
    #+BEGIN_EXAMPLE
    set(CMAKE_BUILD_TYPE "Release")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} -std=c++11 -O2 -g -ggdb")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} -std=c++11 -O2")

    #+END_EXAMPLE

  - 子文件夹
    #+BEGIN_EXAMPLE
    add_subdirectory("./SeetaFaceEngine/FaceDetection")
    #+END_EXAMPLE

  - make test
    #+BEGIN_EXAMPLE
     enable_testing ()
     foreach (f ${SRC_LIST})
       string(REGEX REPLACE "[.]cpp" ".bin" BIN ${f})
       add_executable(${BIN} ${f})
       target_link_libraries(${BIN} viplnet ${OpenCV_LIBS} ${det_align_lib})
       add_test(test_name ${BIN} args)
     endforeach ()
    #+END_EXAMPLE



