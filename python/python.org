#coding=utf-8
* Emacs python
** C-c C-p
   start a python shell
** C-c C-z
   switch to python shell
** C-c C-c
   exec current py file

* Grammar
** import_module
   #+BEGIN_EXAMPLE
   sys.path.append(os.path.join(os.getcwd(), 'symbol'))
   net = importlib.import_module("symbol_" + net).get_symbol_train(imdb.num_classes)   
   #+END_EXAMPLE
** np.where(list > val)
   - t_index = np.where(map>threshold) # (x_array, y_array)
** 'str'.endswith , 'str'.startswith
   #+BEGIN_EXAMPLE
   'a.jpg'.endswith('.jpg') # True
   #+END_EXAMPLE
** lambda
*** Format
    #+BEGIN_EXAMPLE
    g = lambda x : {'str' : x}

    which equal to

    def g(x):
        return {'str' : x}
    
    #+END_EXAMPLE
*** filter,map,reduce
    #+BEGIN_EXAMPLE
    >>> foo = [2, 18, 9, 22, 17, 24, 8, 12, 27]
    >>>
    >>> print filter(lambda x: x % 3 == 0, foo) or  [x for x in foo if x % 3 == 0]
       [18, 9, 24, 12, 27]

    >>> print map(lambda x: x * 2 + 10, foo) or  [x * 2 + 10 for x in foo]
       [14, 46, 28, 54, 44, 58, 26, 34, 64]

    >>> print reduce(lambda x, y: x + y, foo)
       139
    #+END_EXAMPLE
** List extend
   #+BEGIN_EXAMPLE
   a = [1]
   b = [2]
   a.extend(b)
   #+END_EXAMPLE
** __getattr__ , __setattr__
   - 我们可以通过重载__getattr__和__setattr__来拦截对成员的访问
     或者作出一些自己希望的行为
   - __getattr__ 在访问对象访问类中不存在的成员时会自动调用
     #+BEGIN_EXAMPLE
     class A():
     def __init__(self,ax,bx):
        self.a = ax
        self.b = bx
     def f(self):
        print (self.__dict__)
     def __getattr__(self,name):
        print ("__getattr__")

     a = A(1,2)
     a.f()
     a.x # __getattr__
     #+END_EXAMPLE
   - __setattr__ 方法用于在初始化对象成员的时候调用，即在设置__dict__的
     item 时就会调用__setattr__方法
     #+BEGIN_EXAMPLE
     class A():
     def __init__(self,ax,bx):
        self.a = ax
        self.b = bx
     def f(self):
        print (self.__dict__)
     def __getattr__(self,name):
        print ("__getattr__")
     def __setattr__(self,name,value):
        print ("__setattr__")
        self.__dict__[name] = value

     a = A(1,2)
     a.x # __getattr__
     a.x = 3 # __setattr__
     #+END_EXAMPLE

** @property
   [[http://eli.thegreenplace.net/2009/02/06/getters-and-setters-in-python/][ref]]
   - 我们将方法变成了属性，我们可以使用正常的点符号访问它。
     
   #+BEGIN_EXAMPLE
   class Person(object):
   
    def __init__(self, first_name, last_name):
        """Constructor"""
        self.first_name = first_name
        self.last_name = last_name
        
    @property
    def full_name(self):
        """
        Return the full name
        """
        return "%s %s" % (self.first_name, self.last_name)
   
   person = Person("Mike", "Driscoll")
   print person.full_name
   print person.first_name
   #+END_EXAMPLE

   - 但是，如果我们试图将该属性设为其他值，我们会引发一个
     AttributeError错误。改变full_name属性的唯一方法是间接这样做：   
     #+BEGIN_EXAMPLE
     person.first_name = "Dan"
     person.full_name
     'Dan Driscoll'
     #+END_EXAMPLE

   - 为 fee 属性创建一个 setter 方法
     #+BEGIN_EXAMPLE
     from decimal import Decimal

     class Fees(object):
     def __init__(self):
        """Constructor"""
        self._fee = None

     @property
     def fee(self):
        """
        The fee property - the getter
        """
        return self._fee

     @fee.setter
     def fee(self, value):
        """
        The setter of the fee property
        """
        if isinstance(value, str):
            self._fee = Decimal(value)
        elif isinstance(value, Decimal):
            self._fee = value
     f = Fees()
     f.fee = '1'
     #+END_EXAMPLE
** '{}'.format
   #+BEGIN_EXAMPLE
   resize = "{}x{}".format(resize_width, resize_height)
   '{:0>5d}'.format(idx)  :0填充,固定宽度5,整数
   '{:>18,.2f}'.format(1.0)     # :冒号+空白填充+右对齐+固定宽度18+浮点精度.2+浮点数声明f
   #+END_EXAMPLE
** ASCII
   #+BEGIN_EXAMPLE
   ord(a)
   chr(97)
   #+END_EXAMPLE

* multiprocessing
  
** multiprocessing
   #+BEGIN_EXAMPLE
   import multiprocessing

   def do(n) :
   name = multiprocessing.current_process().name
   print name,'starting'
   print "worker ", n
   return 

   if __name__ == '__main__' :
   numList = []
   for i in xrange(5) :
    p = multiprocessing.Process(target=do, args=(i,))
    numList.append(p)
    p.start()
    p.join()
    print "Process end."
   #+END_EXAMPLE

** Pool
   - Pool类可以提供指定数量的进程供用户调用，当有新的请求提交到Pool中时，如果池还没有满，
     就会创建一个新的进程来执行请求。如果池满，请求就会告知先等待，直到池中有进程结束，
     才会创建新的进程来执行这些请求。
   - Pool类中的map方法，与内置的map函数用法行为基本一致，它会使进程阻塞直到返回结果。
     注意，虽然第二个参数是一个迭代器，但在实际使用中，必须在整个队列都就绪后，程序才会运行子进程。
   #+BEGIN_EXAMPLE
   import time
   from multiprocessing import Pool
   
   def run(fn) :
   time.sleep(2)
   print fn
   if __name__ == "__main__" :
   startTime = time.time()
   testFL = [1,2,3,4,5]
   pool = Pool(2)#可以同时跑10个进程
   pool.map(run,testFL)
   pool.close()
   pool.join()   
   endTime = time.time()
   print "time :", endTime - startTime
   #+END_EXAMPLE
* itertools
** repeat
   - repeat(object [,times]) -> create an iterator which returns the object
     for the specified number of times.  If not specified, returns the object
     endlessly.

** izip
   - izip(iter1 [,iter2 [...]]) --> izip object
   - Return a izip object whose .next() method returns a tuple where
     the i-th element comes from the i-th iterable argument.  The .next()
     method continues until the shortest iterable in the argument sequence
     is exhausted and then it raises StopIteration.  Works like the zip()
     function but consumes less memory by returning an iterator instead of
     a list.

   
